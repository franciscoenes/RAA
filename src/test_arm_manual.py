import numpy as np
import time
from arm_kinematics import RobotArmRRR
from trajectory_planner import TrajectoryPlanner
from digital_twin import DigitalTwinSimulator
import matplotlib.pyplot as plt
from config import (
    LINK_LENGTHS_METERS, INITIAL_ARM_ANGLES_RAD,
    SIMULATION_PLOT_LIMITS, TRAJECTORY_DT
)

# === Configura√ß√µes Iniciais ===
# Inicializa√ß√£o dos objetos principais
arm = RobotArmRRR()  # Using default config values
planner = TrajectoryPlanner()  # Using default config values
simulator = DigitalTwinSimulator()

# Vari√°veis globais para a simula√ß√£o
simulation_env = None
current_angles = INITIAL_ARM_ANGLES_RAD.copy()

def initialize_simulation():
    """Inicializa o ambiente de simula√ß√£o de forma limpa"""
    global simulation_env
    
    plt.ion()  # Ativa o modo interativo
    
    # Utiliza a Toolbox de Rob√≥tica para criar o ambiente
    simulation_env = simulator.robot.plot(
        current_angles,
        backend='pyplot',
        block=False,
        jointaxes=True,
        eeframe=True,
        shadow=False
    )
    
    # Configura o gr√°fico
    ax = simulation_env.ax
    ax.set_xlim(SIMULATION_PLOT_LIMITS['x'])
    ax.set_ylim(SIMULATION_PLOT_LIMITS['y'])
    ax.set_zlim(SIMULATION_PLOT_LIMITS['z'])
    ax.set_title("Simula√ß√£o do Bra√ßo Rob√≥tico")
    
    plt.show(block=False)
    return simulation_env

def update_simulation_display(joint_angles_rad):
    """Atualiza o ecr√£ da simula√ß√£o sem bloquear"""
    global simulation_env
    
    if simulation_env is not None:
        try:
            # Primeiro atualiza a configura√ß√£o das juntas do rob√¥
            simulation_env.robots[0].robot.q = joint_angles_rad
            
            # Depois chama o passo de atualiza√ß√£o
            simulation_env.step(dt=0.01)
            
            # Pequena pausa para anima√ß√£o suave
            plt.pause(0.001)
        except Exception as e:
            print(f"Aviso: Erro na atualiza√ß√£o da simula√ß√£o: {e}")

# === Interface de Utilizador ===
print("==============================")
print(" SIMULA√á√ÉO DO BRA√áO RRR")
print("==============================")

try:
    # Inicializa a simula√ß√£o
    simulation_env = initialize_simulation()
    print("‚úÖ Simula√ß√£o iniciada com sucesso")
    
    # Define o estado inicial
    q_init = current_angles
    simulator.update_arm(q_init)

    while True:
        # Solicita a posi√ß√£o final ao utilizador
        print("\nIntroduza a posi√ß√£o final pretendida para a garra (x y z), em metros (ex: 0.1 0.2 0.3) ou 'q' para sair:")
        pos_str = input("> ").strip().lower()
        
        if pos_str == 'q':
            print("\nüëã A encerrar a simula√ß√£o...")
            break
            
        try:
            pos_str = pos_str.replace('(', '').replace(')', '')
            x, y, z = map(float, pos_str.split())
            pos_final = [x, y, z]

            # Resolve a cinem√°tica inversa
            solutions = arm.InvKin(pos_final)
            if not solutions:
                print("‚ùå Posi√ß√£o inalcan√ß√°vel pelo bra√ßo.")
                continue

            print("\nForam encontradas", len(solutions), "solu√ß√µes poss√≠veis. A utilizar a primeira.")
            q_target = solutions[0]

            # Gera a trajet√≥ria
            q, dq, ddq, t = planner.generate_trajectory(q_init, q_target, [0,0,0], [0,0,0], T=2.0)

            print("\nA iniciar o movimento...")
            for i in range(len(t)):
                q_i = q[i]
                update_simulation_display(q_i)
                time.sleep(0.02)  # Pequeno atraso para movimento suave

            print("‚úÖ Movimento conclu√≠do")
            q_init = q_target  # Atualiza a posi√ß√£o inicial para o pr√≥ximo movimento
            current_angles = q_target

        except ValueError:
            print("‚ùå Erro: Formato inv√°lido. Utilize tr√™s n√∫meros separados por espa√ßo.")
        except Exception as e:
            print("‚ùå Erro:", e)

except KeyboardInterrupt:
    print("\n‚ö†Ô∏è Interrompido pelo utilizador")
except Exception as e:
    print(f"‚ùå Erro fatal: {str(e)}")
finally:
    print("üßπ A limpar recursos...")
    if simulation_env:
        plt.close('all')

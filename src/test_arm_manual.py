"""
Programa de teste para controlo manual do bra√ßo rob√≥tico.
Permite ao utilizador especificar posi√ß√µes alvo e visualizar o movimento do bra√ßo em simula√ß√£o.
"""

import time
import matplotlib.pyplot as plt
from arm_kinematics import RobotArmRRR
from trajectory_planner import TrajectoryPlanner
from digital_twin import DigitalTwinSimulator
from config import INITIAL_ARM_ANGLES_RAD

# === Inicializa√ß√£o dos Componentes do Sistema ===
# Cria√ß√£o das inst√¢ncias principais utilizando os valores predefinidos
arm = RobotArmRRR()  # Modelo cinem√°tico do bra√ßo
planner = TrajectoryPlanner()  # Planeador de trajet√≥rias
simulator = DigitalTwinSimulator()  # Simulador 3D

# Configura√ß√£o inicial dos √¢ngulos das juntas
current_angles = INITIAL_ARM_ANGLES_RAD.copy()

# === Interface com o Utilizador ===
print("==============================")
print(" SIMULA√á√ÉO DO BRA√áO RRR")
print("==============================")

try:
    # Inicializa√ß√£o do ambiente de simula√ß√£o
    simulator.initialize_simulation()
    print("‚úÖ Ambiente de simula√ß√£o iniciado com sucesso")

    # Configura√ß√£o da posi√ß√£o inicial do bra√ßo
    q_init = current_angles
    simulator.update_arm(q_init)

    while True:
        # Interface para introdu√ß√£o das coordenadas do ponto alvo
        print(
            "\nIntroduza a posi√ß√£o final pretendida (x y z), em metros (exemplo: 0.1 0.2 0.3) ou 'q' para sair:"
        )
        pos_str = input("> ").strip().lower()

        if pos_str == "q":
            print("\nüëã A encerrar o programa de teste...")
            break

        try:
            # Processamento das coordenadas introduzidas
            pos_str = pos_str.replace("(", "").replace(")", "")
            x, y, z = map(float, pos_str.split())
            pos_final = [x, y, z]

            # C√°lculo da cinem√°tica inversa para a posi√ß√£o alvo
            solutions = arm.InvKin(pos_final)
            if not solutions:
                print("‚ùå Posi√ß√£o fora do espa√ßo de trabalho do bra√ßo.")
                continue

            print(
                "\nForam encontradas",
                len(solutions),
                "solu√ß√µes poss√≠veis. A utilizar a primeira solu√ß√£o.",
            )
            q_target = solutions[0]

            # Gera√ß√£o da trajet√≥ria entre a posi√ß√£o atual e a posi√ß√£o alvo
            # Velocidades e acelera√ß√µes iniciais e finais nulas, dura√ß√£o de 2 segundos
            q, dq, ddq, t = planner.generate_trajectory(
                q_init, q_target, [0, 0, 0], [0, 0, 0], T=2.0
            )

            print("\nA executar o movimento planeado...")
            # Execu√ß√£o da trajet√≥ria na simula√ß√£o
            for i in range(len(t)):
                q_i = q[i]
                simulator.update_simulation_display(q_i)
                time.sleep(0.02)  # Atraso para visualiza√ß√£o suave do movimento

            print("‚úÖ Movimento conclu√≠do com sucesso")
            q_init = q_target  # Atualiza√ß√£o da posi√ß√£o inicial para o pr√≥ximo movimento
            current_angles = q_target

        except ValueError:
            print(
                "‚ùå Erro: Formato inv√°lido. Introduza tr√™s n√∫meros separados por espa√ßos."
            )
        except Exception as e:
            print("‚ùå Erro durante a execu√ß√£o:", e)

except KeyboardInterrupt:
    print("\n‚ö†Ô∏è Programa interrompido pelo utilizador")
except Exception as e:
    print(f"‚ùå Erro cr√≠tico do sistema: {str(e)}")
finally:
    print("üßπ A libertar recursos do sistema...")
    plt.close("all")  # Encerramento de todas as janelas de visualiza√ß√£o

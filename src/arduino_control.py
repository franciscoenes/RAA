import time
import numpy as np
import serial
from config import ARDUINO_PORT, ARDUINO_BAUD_RATE, INITIAL_ARM_ANGLES_RAD


class ArduinoArmControllerSerial:
    def __init__(self, port=ARDUINO_PORT, baud_rate=ARDUINO_BAUD_RATE):
        """
        Inicializa a comunica√ß√£o s√©rie com o Arduino para controlo da rota√ß√£o da base.
        Par√¢metros:
            port: Porta s√©rie (exemplo: 'COM3' para Windows, '/dev/ttyUSB0' para Linux)
            baud_rate: Taxa de transmiss√£o da comunica√ß√£o s√©rie
        """
        self.port = port
        self.baud_rate = baud_rate
        self.serial_connection = None

        try:
            self.serial_connection = serial.Serial(port, baud_rate, timeout=1)
            time.sleep(2)  # Aguarda a inicializa√ß√£o da liga√ß√£o s√©rie
            print("‚úÖ Liga√ß√£o s√©rie ao Arduino estabelecida com sucesso")

            # Define os √¢ngulos iniciais (utilizando valores da configura√ß√£o)
            self.current_angles_deg = {
                "base": np.degrees(INITIAL_ARM_ANGLES_RAD[0]),
                "shoulder": np.degrees(INITIAL_ARM_ANGLES_RAD[1]),
                "elbow": np.degrees(INITIAL_ARM_ANGLES_RAD[2]),
                "gripper": 0,
            }

            # Envia a posi√ß√£o inicial da base para o Arduino
            self.set_joint_angles_deg(self.current_angles_deg)
            time.sleep(2)  # Permite tempo para o Arduino executar o movimento

        except serial.SerialException as e:
            print(f"‚ùå Erro ao abrir a porta s√©rie {port}: {e}")
            self.serial_connection = None
        except Exception as e:
            print(f"‚ùå Ocorreu um erro inesperado durante a liga√ß√£o s√©rie: {e}")
            self.serial_connection = None

    def set_joint_angles_deg(self, angles_deg):
        """
        Envia apenas o √¢ngulo da base para o Arduino atrav√©s da liga√ß√£o s√©rie.
        Os outros √¢ngulos s√£o armazenados mas n√£o enviados.
        Par√¢metros:
            angles_deg: Dicion√°rio com os √¢ngulos das juntas em graus
                       {'base': √¢ngulo, 'shoulder': √¢ngulo, 'elbow': √¢ngulo, 'gripper': √¢ngulo}
        """
        if self.serial_connection and self.serial_connection.isOpen():
            try:
                # Obt√©m apenas o √¢ngulo da base, usa o valor atual se n√£o especificado
                base_angle = angles_deg.get(
                    "base", self.current_angles_deg.get("base", 0)
                )

                # Armazena todos os √¢ngulos (para compatibilidade com a simula√ß√£o)
                self.current_angles_deg["base"] = base_angle
                self.current_angles_deg["shoulder"] = angles_deg.get(
                    "shoulder", self.current_angles_deg.get("shoulder")
                )
                self.current_angles_deg["elbow"] = angles_deg.get(
                    "elbow", self.current_angles_deg.get("elbow")
                )
                self.current_angles_deg["gripper"] = angles_deg.get(
                    "gripper", self.current_angles_deg.get("gripper")
                )

                # Mapeamento de √¢ngulos entre simula√ß√£o e realidade:
                # Na simula√ß√£o:
                # - √¢ngulos positivos = rota√ß√£o para a direita
                # - √¢ngulos negativos = rota√ß√£o para a esquerda
                # No servomotor:
                # - 0¬∞ = posi√ß√£o central
                # - 90¬∞ = rota√ß√£o m√°xima √† esquerda

                # Converte o √¢ngulo da simula√ß√£o para o √¢ngulo do servomotor
                if base_angle < 0:  # Se negativo (esquerda na simula√ß√£o)
                    servo_angle = abs(
                        base_angle
                    )  # Converte para positivo (esquerda no servo)
                    print(
                        f"üîÑ A converter √¢ngulo negativo {base_angle}¬∞ para servo: {servo_angle}¬∞"
                    )
                else:  # Se positivo (direita na simula√ß√£o)
                    servo_angle = 0  # Mant√©m na posi√ß√£o central para √¢ngulos positivos
                    print(
                        f"üîÑ √Çngulo positivo {base_angle}¬∞ -> mantendo na posi√ß√£o central"
                    )

                # Limita o √¢ngulo entre 0-90 graus
                servo_angle = max(0, min(90, servo_angle))

                # Envia o √¢ngulo para o Arduino
                command = f"{int(servo_angle)}\n"  # Converte para inteiro para evitar problemas com n√∫meros decimais
                print(
                    f"üì° A enviar √¢ngulo para o Arduino: {servo_angle}¬∞ (√¢ngulo original: {base_angle}¬∞)"
                )
                self.serial_connection.write(command.encode())
                self.serial_connection.flush()  # Garante que os dados s√£o enviados

            except Exception as e:
                print(f"‚ùå Erro ao enviar o √¢ngulo da base pela porta s√©rie: {e}")

    def send_to_robot(self, joint_angles_rad):
        """
        Envia os √¢ngulos para o rob√¥ com suporte do Arduino para a rota√ß√£o da base.
        Par√¢metros:
            joint_angles_rad: Lista de √¢ngulos das juntas em radianos
        """
        try:
            # Converte o √¢ngulo da base de radianos para graus
            base_angle_deg = np.degrees(joint_angles_rad[0])
            print(
                f"üîÑ √Çngulo da base (rad): {joint_angles_rad[0]:.3f}, (graus): {base_angle_deg:.1f}¬∞"
            )
            self.set_joint_angles_deg({"base": base_angle_deg})
        except Exception as e:
            print(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel enviar o √¢ngulo para o Arduino: {e}")

    def close(self):
        """
        Fecha a liga√ß√£o s√©rie com o Arduino.
        """
        if self.serial_connection and self.serial_connection.isOpen():
            self.serial_connection.close()
            print("Liga√ß√£o s√©rie terminada")


if __name__ == "__main__":
    # C√≥digo de teste
    try:
        arm = ArduinoArmControllerSerial()

        # Testa apenas a rota√ß√£o da base
        print("A testar a rota√ß√£o da base...")
        arm.set_joint_angles_deg({"base": 0})
        time.sleep(1)
        arm.set_joint_angles_deg({"base": 180})
        time.sleep(1)
        arm.set_joint_angles_deg({"base": 90})
        time.sleep(1)

    except Exception as e:
        print(f"Erro durante o teste: {e}")
    finally:
        if "arm" in locals():
            arm.close()

    # Exemplo de Utiliza√ß√£o (para testar este m√≥dulo diretamente, se necess√°rio)
    # if __name__ == "__main__":
    #     try:
    #         arm_serial = ArduinoArmControllerSerial(port='COM3') # Ajustar porta
    #         time.sleep(3)
    #         print("A mover o bra√ßo para os √¢ngulos: 45, 90, 45, 30")
    #         arm_serial.set_joint_angles_deg({'base': 45, 'shoulder': 90, 'elbow': 45, 'gripper': 30})
    #         time.sleep(3)
    #         print("A mover o bra√ßo para os √¢ngulos: 135, 30, 150, 90")
    #         arm_serial.set_joint_angles_deg({'base': 135, 'shoulder': 30, 'elbow': 150, 'gripper': 90})
    #         time.sleep(3)
    #     except Exception as e:
    #         print(f"Erro durante o teste s√©rie: {e}")
    #     finally:
    #         if 'arm_serial' in locals():
    #             arm_serial.close()
